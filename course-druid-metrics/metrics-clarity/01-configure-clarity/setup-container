#!/bin/bash

#apt-get update
#apt-get install wget -y
#apt-get install -y libfindbin-libs-perl
#apt-get install jq -y
#apt-get install perl -y
#apt install python2 -y
#apt install openjdk-8-jre-headless -y
#apt install curl -y
#apt install gzip -y
#echo "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64" >> /root/.bashrc



# download imply full
#rm -rf /root/imply-2021.09*
curl -O https://static.imply.io/release/imply-2022.11.tar.gz
tar -xzf imply-2022.11.tar.gz
wget https://github.com/shallada/InstruqtImages/raw/main/pivot-db/pivot-settings.sqlite -P /root/imply-2022.11/var/pivot
apt-get install python3 -y
apt install python3-pip -y
curl -O https://archive.apache.org/dist/kafka/2.7.0/kafka_2.13-2.7.0.tgz
tar -xzf kafka_2.13-2.7.0.tgz

# Add the Clarity extension
sed -i 's/druid.extensions.loadList=\[/druid.extensions.loadList=\["clarity-emitter-kafka", /g' \
  /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties

# Configure the emitter
sed -i 's/druid.emitter=logging//g' \
  /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties
sed -i 's/druid.emitter.logging.logLevel=debug//g' \
  /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties

echo "druid.emitter=clarity-kafka" \
  >> /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties
echo "druid.emitter.clarity.topic=druid-metrics" \
  >> /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties
echo "druid.emitter.clarity.producer.bootstrap.servers=localhost:9092" \
  >> /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties
echo "druid.emitter.clarity.clusterName=clarity-collection-cluster" \
  >> /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties

# configure Pivot
echo -e "\n# Specify the metrics cluster to connect to\nmetricsCluster:\n  host: localhost:8082 # Enter the IP of your metrics collecting broker node here\n\n# Enter the name of your clarity data source\nmetricsDataSource: druid-metrics\n\n# Instead of relying on auto-detection you can explicitly specify which clusters should be available from the cluster dropdown\nclientClusters: [\"clarity-collection-cluster\"]" \
  >> /root/imply-2022.11/conf-quickstart/pivot/config.yaml

# add license to pivot config
cp /root/imply-2022.11/conf-quickstart/pivot/config.yaml /root/imply-2022.11/conf-quickstart/pivot/config.bac.yaml
echo 'license: '"'"'{"name":"community-pivot","expiryDate":"2024-10-01","features":["alerts","apache-druid-compatibility","cross-tab","scheduled-reports"]}|2021-09-24|GGiGSo4WBTkSDI8tvZe1w7IBvc9pAYbgvrmjkv/5tWx6o14wS46XeIuWoNkreynY37NY+sveRZSoRCkdJCJ1mnaa1GzsSfmNgbce+lnNqndHlhIQf5Nt3c1udtyXuxuYQ4+L3n+s7s02iXXGjQYPNipJftSvStltQXrGRnypMb1xMycPWNBQVHdx8uvdR4siRiI/Rj5idfK55Wz6dJntMhBQK5rgcx0Vg1RggvVt69PvfYPNHozY/AbsWYR6va3XJwFThNvIrseCKq5YpoUI2FswJd+Uzh1zmxJG+m7s49Q/fMUKh6d8XnOu2UJze90qzSTEGmI0+Y2bs9xWACL+9A=='"'"' ' >> /root/imply-2022.11/conf-quickstart/pivot/config.yaml


# Enable query logging
echo "druid.request.logging.type=slf4j" \
  >> /root/imply-2022.11/conf-quickstart/druid/_common/common.runtime.properties

#rm /root/imply-2022.11/var/pivot/pivot-settings.sqlite
#wget https://github.com/shallada/InstruqtImages/raw/main/pivot-db/pivot-settings.sqlite -P /root/imply-2022.11/var/pivot

#start Druid
set-workdir /root/imply-2022.11
nohup /root/imply-2022.11/bin/supervise -c /root/imply-2022.11/conf/supervise/quickstart.conf  > /root/log.out 2> /root/log.err < /dev/null & disown
set-workdir /root
sleep 3

cat > /root/clarity-kafka-supervisor.json << EOF
{
  "type": "kafka",
  "dataSchema": {
    "dataSource": "druid-metrics",
    "parser": {
      "type": "string",
      "parseSpec": {
        "format": "json",
        "dimensionsSpec": {
          "dimensions": [],
          "dimensionExclusions": [ "segment", "interval" ]
        },
        "timestampSpec": {
          "column": "timestamp",
          "format": "auto"
        }
      }
    },
    "metricsSpec": [
      {"type":"count", "name":"count"},
      {"type":"doubleSum", "name":"sum", "fieldName":"value"},
      {"type":"doubleMin", "name":"min", "fieldName":"value"},
      {"type":"doubleMax", "name":"max", "fieldName":"value"},
      {"type":"approxHistogram", "name":"histogram", "fieldName":"value", "resolution":50}
    ],
    "granularitySpec": {
      "type": "uniform",
      "segmentGranularity": "hour",
      "queryGranularity": "none",
      "rollup": true
    }
  },
  "tuningConfig": {
    "type": "kafka",
    "maxRowsInMemory": 150000,
    "maxRowsPerSegment": 5000000,
    "intermediatePersistPeriod": "PT2H"
  },
  "ioConfig": {
    "topic": "druid-metrics",
    "taskCount": 1,
    "replicas": 1,
    "taskDuration": "PT2H",
    "consumerProperties": {
      "bootstrap.servers": "localhost:9092"
    }
  }
}
EOF

# Wait for Druid to initialize
while [ "$(curl -s http://localhost:8888/druid/indexer/v1/isLeader)" != '{"leader":true}' ]
do
  sleep 5
done

# Start Kafka
#nohup /root/kafka_2.13-2.7.0/bin/kafka-server-start.sh /root/kafka_2.13-2.7.0/config/server.properties > /dev/null & disown

# Start streaming
#curl -XPOST \
#  -H'Content-Type: application/json' \
#  -d@/root/clarity-kafka-supervisor.json \
#  http://localhost:8090/druid/indexer/v1/supervisor

# Since everything should be started, remove the key file
rm /root/imply-2022.11/conf-quickstart/pivot/config.yaml
mv /root/imply-2022.11/conf-quickstart/pivot/config.bac.yaml /root/imply-2022.11/conf-quickstart/pivot/config.yaml

apt-get -y install stunnel4

cat > /root/webserver.conf << \EOF
pid = /root/stunnel.pid

[https]
accept = 8443
connect = 8888
cert = keyfile.pem
EOF

cat > /root/keyfile.pem << \EOF
-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDRo5VkCKXJOEBn
rMwg8ngUDr7VQ3HOcZlU/6hpjDsXjdPC+o9QvwF47zgEUAlZ0S82Ebo9ja8/V7fX
tCMiXH8XP8xmI41wkeECZQ4cFPeB4RAT3q893958Wsapv2e7syns957/1hSdf+rQ
/iOFwXFelFybuD4FWUCwaoSxajs4LVBYWGv+sL2Cl8UWJ3wokiiwfPQqHC+4SBb2
ExgH664bQZ3tSdSOzegNUWYoe6OG+9cjrb+X8OFTrYBHFDXa7irMSXWngLs1RVan
r6sP+3Glxq+GoEdQoIOi0hyZADyf+ZeUDA3sBkcrvVCpFWyfJLng4UvKdk02yNtB
43TyGv9NAgMBAAECggEAeF7TInMMrjMMV/sR4kEWzX2B+XYWXJFBl1qMWr5YF7gp
xSSVManasJO6uE80b0v7LbKUG0/FNjuppcMbAVnW54SMWoFDb0Vzyyo3JcysKPkP
gDk2qfJnD0QYGdN7Pn0rL5MmyoMjpyORspqZzu05qTLK0ebCRdPvntwqgKwcgK4J
+p1S8a+fhAPyNe/5oAmEro9iuiq6fea1lDpdl3AmOvi4sjkp8hpsw1k/4ryZZD45
Xrvbw3JtH36UnyS9o//fWY0UsvvOrd/ULIJAwUZQtWelEXxiYmqnQ8J0bCcXTpq7
chIZGFk3zUN3V/FuqZp7r+O4k5QPUnFYGu4HHzRCyQKBgQDtqQ1c1PWJ+bKAai3B
dnRd+64BuhuH3Sf5oXmPSZElHO8p8pPcsoLTOKZf+7VeFky0Dd3bWGyMBi1djNau
soT6cPCNmYLNYJOet58DIerld2q801F76s2aoJ4Vr8Fe8frUu0T7DlojIoXtWkxJ
UKM92rj+agzNzkVFlpIffO3LfwKBgQDh0Pkjtw38lPfI4jjWcEuquzPsWFFj442X
43AJXS4gehPJCeVwYBSASzRznABo1nJ/O7XjBz2TyGS368VoS0XwkzYWKl709m8d
sirvOr3gazQbIVg1+6Xcwp+fkXLDdnDgLRybk97WGLt8bcL72vfSdiPkA+ZCldTk
MEM8y4MLMwKBgQCV98Y53Rwv+8Pa6qWC3geiQq3T4yd6PWD7UhzOAUM44yA8HRmW
+4I4XRgHm2MgQvwV5mYoAo1EcqVv0e6qgHYPPvNctxDmHloonoAVzvJV6FwPWV2i
z1D8kPwQfT6Ndi6szJtDvRO99gwC8acP4HWSE5IG4M7Bk7b8qX39pqy7awKBgBNa
ps/R06gPWIFmKjru2v1iGBwsoaUvDqay/po+20I7VFDJwVl1UqyARZmXCE3z+1I+
WuN/bl6pMUC2O3Ap62+oHl2d+g+Cw5lG+PkSDs4aQhgFLptJ2zhlkerKO4zXLOt5
0lbfQJ0W95K9kZWmedEXARJ85xJT5zA7lreyNaQTAoGBAOVV+UPbtX4fodKW3wUF
9Wu2SWDl7dMugT/SIxBELXowg5wbUEDqY1egevNkzITfRuRK8dUmQN2BXHB6o8rt
OWYPAArAlIPhfMZ48GiPqvJix5v4RcL+dXrLpcIBerym8R3qii0vHM7FHOYux1PD
cVpCyhG+KgfJRfbhyhiT3F7m
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIC2TCCAcGgAwIBAgIUB1uIZhHQIL9DQyuVeGjmQD/u30IwDQYJKoZIhvcNAQEL
BQAwFDESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTIyMDMyOTIyMTMwNFoXDTMyMDMy
NjIyMTMwNFowFDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEA0aOVZAilyThAZ6zMIPJ4FA6+1UNxznGZVP+oaYw7F43T
wvqPUL8BeO84BFAJWdEvNhG6PY2vP1e317QjIlx/Fz/MZiONcJHhAmUOHBT3geEQ
E96vPd/efFrGqb9nu7Mp7Pee/9YUnX/q0P4jhcFxXpRcm7g+BVlAsGqEsWo7OC1Q
WFhr/rC9gpfFFid8KJIosHz0KhwvuEgW9hMYB+uuG0Gd7UnUjs3oDVFmKHujhvvX
I62/l/DhU62ARxQ12u4qzEl1p4C7NUVWp6+rD/txpcavhqBHUKCDotIcmQA8n/mX
lAwN7AZHK71QqRVsnyS54OFLynZNNsjbQeN08hr/TQIDAQABoyMwITAJBgNVHRME
AjAAMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDANBgkqhkiG9w0BAQsFAAOCAQEAPKD5
7cv0wk1v45ui6M9ui+jyNiC4cU6J5CfIhxbBMmkEv31yPxCTGNyk04ic5EoW6gKt
kI0A7uNPSd7ph5gWwMpCNfA7uUs8XHARJcAxasGeu6JVYILI52rhDGznjetisPWM
z/BEDhHYDEWsbgkpy46/a/ha9gddZ5apA4s9JAm3fiQ9g1V5sEIC2lJpyaYCIZdN
mAbCQrJGc7MqUgOQKnLpw2inOr3K+tEJPG7PmY2yJ0geSA3lrnbjIdM8YQQ+jSWJ
Nx20QuT2mjFoq+vJg0o9acJvkZQjnIHuKkUAzK7aH1fTRx77d/5SGBepLOP6GTyj
kCztd6hQYUZe3MbxuA==
-----END CERTIFICATE-----
EOF

chmod +r keyfile.pem

nohup stunnel webserver.conf > /dev/null 2> /dev/null < /dev/null & disown
