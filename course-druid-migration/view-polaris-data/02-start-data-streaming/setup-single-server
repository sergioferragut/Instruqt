#!/bin/bash

apt-get update
apt-get install -y python3-kafka
# Start zookeeper (for Kafka)
nohup /root/imply-2021.09/bin/run-zk &

# Install kafka
#curl -O https://archive.apache.org/dist/kafka/2.7.0/kafka_2.13-2.7.0.tgz
#tar -xzf kafka_2.13-2.7.0.tgz

# Start Kafka
nohup /root/kafka_2.13-2.7.0/bin/kafka-server-start.sh /root/kafka_2.13-2.7.0/config/server.properties > /dev/null &

DEBIAN_FRONTEND=noninteractive apt -y install screen

# Create the producer script
cat > /root/process-monitor-producer.sh << \EOF
# $1 is ISO or UNIX
# $2 is CSV or JSON
# $3 is the number of times to run top or 0 to run forever
if [[ $3 != "0" ]]
then
  N_OPTION=" -n $3 "
fi
if [[ $2 == "CSV" ]]
then
  printf "time,pid,processName,cpu,memory\n" $(date --utc +%FT%TZ) $pid $name $cpu $mem
fi
top -d 0.1 -b $N_OPTION | \
  grep -w -E "^\s*[0-9]+" | \
  awk '{print $1 " " $9 " " $10}' | \
  while read -r pid cpu mem
    do
      ps -ef | awk 'NF{print $2 " " $8}' | \
        while read -r pspid name
          do
            if [[ "$pid" == "$pspid" ]]
              then
                if [[ $1 == "ISO" ]]
                then
                  if [[ $2 == "CSV" ]]
                  then
                    printf "%s,%s,%s,%s,%s\n" $(date --iso-8601=ns | awk 'BEGIN { FS = ","} ; {printf "%s.%03d", $1, $2/1000000}') $pid $name $cpu $mem
                  else
                    printf "{\"__time\":\"%s\",\"pid\":\"%s\",\"processName\":\"%s\",\"cpu\":%s,\"memory\":%s}\n" $(date --iso-8601=ns | awk 'BEGIN { FS = ","} ; {printf "%s.%03d", $1, $2/1000000}') $pid $name $cpu $mem
                  fi
                else
                  if [[ $2 == "CSV" ]]
                  then
                    printf "%s,%s,%s,%s,%s\n" $(date +%s%N | cut -b1-13) $pid $name $cpu $mem
                  else
                    printf "{\"__time\":\"%s\",\"pid\":\"%s\",\"processName\":\"%s\",\"cpu\":%s,\"memory\":%s}\n" $(date +%s%N | cut -b1-13) $pid $name $cpu $mem
                  fi
                fi
              fi
          done
    done
EOF
chmod +x /root/process-monitor-producer.sh


cat > ~/.screenrc <<-EOF
# ~/.screenrc configuration file

# Set the default shell
shell "/bin/bash"

# These lines give us a pretty navigation bar at the bottom
hardstatus off
hardstatus alwayslastline
hardstatus string '%{= kW}[ %{m}%H %{W}][%= %{= kw}%?%-Lw%?%{r}(%{g}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{W}][%{Y} %d/%m %{Y}%c %{W}]'

# Disable the startup message
startup_message off

# Disable Visual Bell
vbell off

# Increase the scrollback buffer
defscrollback 5000

# Use SHIFT-right and SHIFT-left arrow to change windows
bindkey ^[[1;2D prev
bindkey ^[[1;2C next

# Add your own programs here to auto-start them in a window.
screen -t shell 0
EOF


# Append this onto the end of ~/.bashrc
# The \ ensures the target file has a literal $STY and not an empty string.
cat >> ~/.bashrc <<-EOF
if [[ -z "\$STY" ]]; then
   screen -xRR default
fi
EOF


cat > /root/send_events.py << \EOF
import json
import os
import sys
from kafka import KafkaConsumer
import requests

if len(sys.argv) != 3:
  print('Usage: Python3 '+sys.argv[0]+' TABLE_ID TOKEN')
  exit(-1)

url = "https://api.imply.io/v1/events/"+os.getenv('TABLE_ID')

headers = {
  'Authorization': 'Bearer {token}'.format(token=os.getenv('IMPLY_TOKEN')),
  'Content-Type': 'application/json'
}

consumer = KafkaConsumer('process-monitor', bootstrap_servers = ['localhost:9092'], value_deserializer=lambda m: json.loads(m.decode('utf-8')))

BUFFER_FLUSH_SIZE = 1000
buffer = ''
record_count = 0
for record in consumer:
  buffer += str(record.value).replace("'", '"')+'\n'
  record_count += 1
  if len(buffer) >= BUFFER_FLUSH_SIZE:
    response = requests.request("POST", url, headers=headers, data=buffer)
    #print(response)
    buffer = ''
EOF


cat > /root/setup-table.sh << \EOF

# Create a token for API access
export IMPLY_TOKEN=$(curl --request POST "https://id.imply.io/auth/realms/$ORGANIZATION_NAME/protocol/openid-connect/token" \
  --header "Content-Type: application/x-www-form-urlencoded" \
  --data-urlencode "client_id=$CLIENT_ID" \
  --data-urlencode "client_secret=$CLIENT_SECRET" \
  --data-urlencode "grant_type=client_credentials" \
| jq -r .access_token)

# Create a Polaris table
curl --location --request POST "https://api.imply.io/v1/tables" \
  --header "Authorization: Bearer $IMPLY_TOKEN" \
  --header "Content-Type: application/json" \
  --data-raw "{
    \"name\": \"$TABLE_NAME\"
  }" \
| jq

# Get the table ID
export TABLE_ID=$(curl --location --request GET "https://api.imply.io/v1/tables?name=$TABLE_NAME" \
  --header "Authorization: Bearer $IMPLY_TOKEN" \
| jq -r .values[0].id)

# Define the table's schema
curl --location --request PUT "https://api.imply.io/v1/tables/$TABLE_ID" \
  --header "Authorization: Bearer $IMPLY_TOKEN" \
  --header "Content-Type: application/json" \
  --data-raw "{
      \"name\": \"$TABLE_NAME\",
      \"inputSchema\": [
          {
              \"type\": \"string\",
              \"name\": \"processName\"
          },
          {
              \"type\": \"float\",
              \"name\": \"cpu\"
          },
          {
              \"type\": \"float\",
              \"name\": \"memory\"
          }
      ]
  }" \
| jq

# Create a Kafka topic
/root/kafka_2.13-2.7.0/bin/kafka-topics.sh --create --topic process-monitor --bootstrap-server localhost:9092

# Start streaming events to Kafka (for 15 minutes)
/root/process-monitor-producer.sh ISO JSON 9000 | \
  /root/kafka_2.13-2.7.0/bin/kafka-console-producer.sh --broker-list localhost:9092 --topic process-monitor > /dev/null &

# Pump events into Polaris
python3 /root/send_events.py $TABLE_ID $IMPLY_TOKEN &
EOF

chmod +x /root/setup-table.sh


cat > /root/redirect.py << \EOF
#!/usr/bin/env python
"""
usage: redirect.py [-h] [--port PORT] [--ip IP] redirect_url

positional arguments:
  redirect_url
optional arguments:
  -h, --help            show this help message and exit
  --port PORT, -p PORT  port to listen on
  --ip IP, -i IP        host interface to listen on
"""
import SimpleHTTPServer
import SocketServer
import sys
import argparse



def redirect_handler_factory(url):
    class RedirectHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
       def do_GET(self):
           self.send_response(301)
           self.send_header('Location', url)
           self.end_headers()

    return RedirectHandler


def main():

    parser = argparse.ArgumentParser(description='HTTP redirect server')

    parser.add_argument('--port', '-p', action="store", type=int, default=80, help='port to listen on')
    parser.add_argument('--ip', '-i', action="store", default="", help='host interface to listen on')
    parser.add_argument('redirect_url', action="store")

    myargs = parser.parse_args()

    redirect_url = myargs.redirect_url
    port = myargs.port
    host = myargs.ip

    redirectHandler = redirect_handler_factory(redirect_url)

    handler = SocketServer.TCPServer((host, port), redirectHandler)
    print("serving at port %s" % port)
    handler.serve_forever()

if __name__ == "__main__":
    main()
EOF


cat > /root/setup_web_server.sh << \EOF
python2 redirect.py -p 8000 https://$1.app.imply.io/home > /dev/null &
EOF
chmod +x setup_web_server.sh
